{"version":3,"sources":["Home.js","Help.js","weatherapi.js","CityView.js","InstallPWA.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","state","newCity","cities","inputChanged","event","_this","setState","target","value","buttonClicked","length","prevState","concat","Object","toConsumableArray","saveCities","alert","localStorage","getItem","this","JSON","parse","index","_this2","filter","v","i","setItem","stringify","_this3","react_default","a","createElement","Fragment","id","map","city","key","Link","to","role","aria-label","className","onClick","deleteCity","placeholder","onChange","type","React","Component","Help","getWeather","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","abrupt","sent","json","stop","_x","apply","arguments","CityView","temperature","loading","props","match","params","toLowerCase","response","main","temp","console","log","t0","toUpperCase","withRouter","InstallPWA","readyToInstall","installEvent","install","outcome","prompt","navigator","storage","persist","window","addEventListener","evt","preventDefault","standalone","App","src_InstallPWA","Route","path","exact","component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","URL","process","href","origin","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.861f9592.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Home.css';\n\nclass Home extends React.Component {\n  state = {\n    newCity: \"\",\n    cities: []\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(\"cities\")) {\n      this.setState({\n        cities: JSON.parse(localStorage.getItem(\"cities\"))\n      })\n    }\n  }\n\n  inputChanged = (event) => {\n    this.setState({\n      newCity: event.target.value\n    })\n  }\n\n  buttonClicked = () => {\n    if (this.state.newCity.length>2) {\n      this.setState((prevState) => ({\n        cities: [...prevState.cities, this.state.newCity],\n        newCity: \"\"\n      }), () => {\n        this.saveCities();\n      });\n    } else {\n      //TODO: replace alert with a better UI\n      alert(\"You need to insert a city name first\");\n    }\n  }\n\n  deleteCity(index) {\n    this.setState((prevState) => ({\n      cities: prevState.cities.filter( (v,i) => i!==index )\n    }), () => {\n      this.saveCities();\n    });\n  }\n\n  saveCities() {\n    localStorage.setItem(\"cities\", JSON.stringify(this.state.cities));\n  }\n\n  render() {\n    return (\n      <section>\n        {\n          this.state.cities.length > 0\n          ? <>\n              <h2>Cities</h2>\n              <ul id=\"cityList\">\n              { this.state.cities.map( (city, index) => (\n                <li key={city}><Link to={`cities/${city}`}>\n                  <span role=\"img\" aria-label=\"weather\">‚õÖÔ∏è</span> {city}</Link> <button className='delete' onClick={() => this.deleteCity(index)}>\n                  <span role=\"img\" aria-label=\"delete\">üóë</span></button>\n                  </li>\n              ))}\n              </ul>\n            </>\n          : <p>Add a city to start using the app</p>\n        }\n        <h3>Add City</h3>\n        <form>\n          <label>City:</label> \n          <input placeholder=\"Enter a city name\" value={this.state.newCity}\n            onChange={this.inputChanged} />\n          <button type=\"button\" onClick={this.buttonClicked}>Add</button>\n        </form>\n      </section>\n    )\n  }\n}\n\nexport default Home;","import React from 'react';\n\nconst Help = () => <div>\n        <h1>Help</h1>\n        <p>This is a PWA sample from ForwardJS PWA+React workshop</p>\n        <p>You can add cities to get the current weather from OpenWeatherMap</p>\n        <p>Please set your own API key at weatherapi.js</p>\n    </div>\n\nexport default Help;","//TODO: Get your own key at https://openweathermap.org/api\nconst key = \"0685c4e8066b577d449babf619cf4ab4\"\n\nexport const getWeather = async (city) => {\n    return (await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${key}&units=imperial`)).json();\n}","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { getWeather } from './weatherapi';\nimport \"./CityView.css\";\n\nclass CityView extends React.Component {\n    state = {\n        temperature: null,\n        loading: true\n    }\n\n    async componentDidMount() {\n        try {\n            const city = this.props.match.params.city.toLowerCase();\n            const response = await getWeather(city);\n            this.setState({\n                temperature: response.main.temp,\n                loading: false\n            });\n\n        } catch (e) {\n            console.log(e)\n            this.setState({\n                temperature: \"ERROR\",\n                loading: false\n            });\n        }\n    }\n    render() {\n      console.log(this.props.match.params);\n        return (\n            <div>\n                <h2 id=\"city\">{this.props.match.params.city.toUpperCase()}</h2>\n                {\n                    this.state.loading \n                    ? <p>Loading</p>\n                    : <p id=\"temperature\">{ this.state.temperature }F</p>\n\n                }\n            </div>\n        )\n    }\n}\n\nexport default withRouter(CityView);\n","import React from 'react';\n\nclass InstallPWA extends React.Component {\n  state = {\n    readyToInstall: false,\n  }\n\n  installEvent = null;\n\n  componentDidMount() {\n    // ask for persistance\n    // persist not available in safari\n    if ('storage' in navigator && 'persist' in navigator.storage) {\n      navigator.storage.persist();\n    }\n    window.addEventListener('beforeinstallprompt', (evt) => {\n      evt.preventDefault()\n      this.installEvent = evt;\n      this.setState({\n        readyToInstall: true,\n      });\n\n    });\n  }\n\n  install = async () => {\n    // this is a promise\n    const outcome = this.installEvent.prompt();\n\n    // outcome is a stream\n    if (outcome === 'dismissed') {\n\n    } else {\n      // analytics on outcome\n    }\n    return outcome;\n  }\n\n  render() {\n    // wait for browser to give us this ability\n    return (\n      <>\n      { this.state.readyToInstall ? <div> Install app</div> :\n          navigator.standalone === false\n            ? <p> Tap, Share, Add to homescreen to install </p> : null\n      }\n      </>\n    );\n  }\n}\n\nexport default InstallPWA;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Link } from 'react-router-dom'\nimport Home from './Home';\nimport Help from './Help';\nimport CityView from './CityView';\nimport InstallPWA from './InstallPWA';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <h1>PWeather 1.0</h1>\n        <InstallPWA />\n        <nav>\n          <ul>\n            <li><Link to=\"/\">Home</Link> </li>\n            <li><Link to=\"/help\">Help</Link></li>\n          </ul>                    \n        </nav>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/help\" component={Help} /> \n        <Route path=\"/cities/:city\" component={CityView} /> \n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(<BrowserRouter>\n                    <App />\n                </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}